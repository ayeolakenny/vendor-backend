// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?
  firstName   String
  lastName    String
  address     String
  phoneNumber String?
  role        UserRole  @default(VENDOR)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  password    Password?
  vendor      Vendor?
}

model Password {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
  passwordHash String
}

model Vendor {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  businessName     String
  address          String
  phoneNumber      String
  otherPhoneNumber String?
  category         String
  status           VendorStatus     @default(PENDING)
  user             User             @relation(fields: [userId], references: [id])
  userId           Int              @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  upload           Upload[]
  listings         Listing[]
  listingReport    ListingReport[]
  awardedListing   AwardedListing[]
}

model Invite {
  id          Int      @id @default(autoincrement())
  email       String
  inviteToken String
  expires     String
  valid       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Upload {
  id               Int             @id @default(autoincrement())
  name             String
  size             Int
  type             String
  bytes            Bytes?
  createdAt        DateTime        @default(now())
  vendor           Vendor?         @relation(fields: [vendorId], references: [id])
  vendorId         Int?
  listing          Listing?        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId        Int?
  application      Application?    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId    Int?
  listingReport    ListingReport?  @relation(fields: [listingReportId], references: [id], onDelete: Cascade)
  listingReportId  Int?
  awardedListing   AwardedListing? @relation(fields: [awardedListingId], references: [id])
  awardedListingId Int?
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  listing      Listing[]
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Listing {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  status       Status        @default(PENDING)
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  upload       Upload[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  vendors      Vendor[]
  applications Application[]
}

model Application {
  id             Int             @id @default(autoincrement())
  comment        String
  listing        Listing         @relation(fields: [listingId], references: [id])
  listingId      Int
  vendor         Category        @relation(fields: [vendorId], references: [id])
  vendorId       Int
  upload         Upload[]
  status         Status          @default(PENDING)
  listingReports ListingReport[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  awardedListing AwardedListing?
}

model AwardedListing {
  id            Int         @id @default(autoincrement())
  description   String
  upload        Upload[]
  deliveryDate  DateTime
  vendor        Vendor?     @relation(fields: [vendorId], references: [id])
  vendorId      Int?
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int         @unique
  createdAt     DateTime    @default(now())
}

model ListingReport {
  id            Int          @id @default(autoincrement())
  comment       String
  vendor        Vendor?      @relation(fields: [vendorId], references: [id])
  vendorId      Int?
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  upload        Upload[]
}

enum VendorStatus {
  PENDING
  APPROVED
  DECLINED
  DEACTIVATED
}

enum UserRole {
  ADMIN
  VENDOR
}

enum Status {
  INREVIEW
  PENDING
  ONGOING
  AWARDED
  DELIVERED
  DECLINED
  ACTIVE
  APPROVED
  INACTIVE
}
